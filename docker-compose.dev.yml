services:
  # MySQL Database for development
  mysql:
    image: mysql:8.0
    container_name: gatrix-mysql-dev
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${DB_NAME:-gatrix}
      MYSQL_USER: ${DB_USER:-gatrix_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-gatrix_password}
    ports:
      - "${DB_PORT:-3306}:3306"
    volumes:
      - mysql_dev_data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
      - ./docker/mysql/conf.d:/etc/mysql/conf.d
    networks:
      - gatrix-dev-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD:-rootpassword}"]
      timeout: 20s
      retries: 10
      interval: 30s
      start_period: 30s

  # Redis Cache for development
  redis:
    image: redis:7-alpine
    container_name: gatrix-redis-dev
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - gatrix-dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 10s

  # Backend API for development (with hot reload)
  backend-dev:
    build:
      context: .
      dockerfile: packages/backend/Dockerfile.dev
      target: development
    container_name: gatrix-backend-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 5000
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: ${DB_NAME:-gatrix}
      DB_USER: ${DB_USER:-gatrix_user}
      DB_PASSWORD: ${DB_PASSWORD:-gatrix_password}
      REDIS_HOST: redis
      # OAuth Configuration
      GITHUB_CLIENT_ID: Ov23liINHymsWsuhfbW4
      GITHUB_CLIENT_SECRET: 81c9780248941071a4642033b1ae174bd5a14982
      GOOGLE_CLIENT_ID: your-google-client-id
      GOOGLE_CLIENT_SECRET: your-google-client-secret
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-dev-jwt-secret}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-dev-refresh-secret}
      SESSION_SECRET: ${SESSION_SECRET:-dev-session-secret}
      ADMIN_EMAIL: ${ADMIN_EMAIL:-admin@gatrix.com}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin123}
      ADMIN_NAME: ${ADMIN_NAME:-Administrator}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      DISABLE_X_POWERED_BY: true
      DEFAULT_LANGUAGE: ${DEFAULT_LANGUAGE:-ko}
      # Chat Server Integration
      CHAT_SERVER_URL: http://chat-server-dev:3001
      # Service Discovery
      SERVICE_DISCOVERY_MODE: ${SERVICE_DISCOVERY_MODE:-etcd}
      ETCD_HOSTS: ${ETCD_HOSTS:-http://etcd:2379}
    ports:
      - "${BACKEND_PORT:-5000}:5000"
      - "9229:9229" # Debug port
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - gatrix-dev-network
    volumes:
      - .:/app
      - /app/node_modules
      - backend_dev_logs:/app/packages/backend/logs
    command: sh -c "mkdir -p /app/packages/backend/logs && chmod 777 /app/packages/backend/logs && yarn workspace @gatrix/backend dev"

  # Frontend for development (with hot reload)
  frontend-dev:
    build:
      context: .
      dockerfile: packages/frontend/Dockerfile.dev
      target: development
    container_name: gatrix-frontend-dev
    restart: unless-stopped
    environment:
      DOCKER_ENV: "true"  # Indicate running in Docker environment (for Node.js scripts)
      VITE_DOCKER_ENV: "true"  # Indicate running in Docker environment (for Vite config)
      VITE_API_URL: ${VITE_API_URL:-/api/v1}
      VITE_APP_NAME: ${VITE_APP_NAME:-Gatrix}
      VITE_DEFAULT_LANGUAGE: ${VITE_DEFAULT_LANGUAGE:-ko}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      - backend-dev
    networks:
      - gatrix-dev-network
    volumes:
      - .:/app
      - /app/node_modules
    extra_hosts:
      - "backend-dev:172.21.0.8"
    command: yarn workspace @gatrix/frontend dev

  # Adminer for database management
  adminer:
    image: adminer:latest
    container_name: gatrix-adminer-dev
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - mysql
    networks:
      - gatrix-dev-network
    environment:
      ADMINER_DEFAULT_SERVER: mysql

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: gatrix-redis-commander-dev
    restart: unless-stopped
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - gatrix-dev-network
    environment:
      REDIS_HOSTS: local:redis:6379

  # etcd for service discovery (optional)
  etcd:
    image: quay.io/coreos/etcd:v3.5.12
    container_name: gatrix-etcd-dev
    restart: unless-stopped
    command:
      - /usr/local/bin/etcd
      - --name=etcd0
      - --data-dir=/etcd-data
      - --listen-client-urls=http://0.0.0.0:2379
      - --advertise-client-urls=http://etcd:2379
      - --listen-peer-urls=http://0.0.0.0:2380
      - --initial-advertise-peer-urls=http://etcd:2380
      - --initial-cluster=etcd0=http://etcd:2380
      - --initial-cluster-token=etcd-cluster-dev
      - --initial-cluster-state=new
      - --log-level=info
    ports:
      - "${ETCD_PORT:-2379}:2379"
      - "2380:2380"
    volumes:
      - etcd_dev_data:/etcd-data
    networks:
      - gatrix-dev-network
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ClickHouse for analytics
  clickhouse:
    image: clickhouse/clickhouse-server:24.12.2.29-alpine
    container_name: gatrix-clickhouse-dev
    restart: unless-stopped
    ports:
      - "${CLICKHOUSE_PORT:-8123}:8123"
      - "9000:9000"
    volumes:
      - clickhouse_dev_data:/var/lib/clickhouse
    networks:
      - gatrix-dev-network
    environment:
      # Disable IPv6 to avoid connection issues on Windows Docker
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://127.0.0.1:8123/ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Event Lens Server for development (with hot reload)
  event-lens-dev:
    build:
      context: .
      dockerfile: packages/event-lens/Dockerfile.dev
      target: development
    container_name: gatrix-event-lens-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3002
      LOG_LEVEL: ${EVENT_LENS_LOG_LEVEL:-debug}
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_DATABASE: event_lens
      CLICKHOUSE_USERNAME: default
      CLICKHOUSE_PASSWORD: ""
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      REDIS_DB: 0
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_DATABASE: ${DB_NAME:-gatrix}
      MYSQL_USER: ${DB_USER:-gatrix_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-gatrix_password}
      WORKER_BATCH_SIZE: ${WORKER_BATCH_SIZE:-1000}
      WORKER_BATCH_TIMEOUT: ${WORKER_BATCH_TIMEOUT:-5000}
      WORKER_CONCURRENCY: ${WORKER_CONCURRENCY:-10}
    ports:
      - "${EVENT_LENS_PORT:-3002}:3002"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    networks:
      - gatrix-dev-network
    volumes:
      - .:/app
      - /app/node_modules
      - event_lens_dev_logs:/app/packages/event-lens/logs
    command: yarn workspace @gatrix/event-lens dev

  # Event Lens Worker for development (with hot reload)
  event-lens-worker-dev:
    build:
      context: .
      dockerfile: packages/event-lens/Dockerfile.dev
      target: development
    container_name: gatrix-event-lens-worker-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      LOG_LEVEL: ${EVENT_LENS_LOG_LEVEL:-debug}
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_DATABASE: event_lens
      CLICKHOUSE_USERNAME: default
      CLICKHOUSE_PASSWORD: ""
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      REDIS_DB: 0
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_DATABASE: ${DB_NAME:-gatrix}
      MYSQL_USER: ${DB_USER:-gatrix_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-gatrix_password}
      WORKER_BATCH_SIZE: ${WORKER_BATCH_SIZE:-1000}
      WORKER_BATCH_TIMEOUT: ${WORKER_BATCH_TIMEOUT:-5000}
      WORKER_CONCURRENCY: ${WORKER_CONCURRENCY:-10}
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    networks:
      - gatrix-dev-network
    volumes:
      - .:/app
      - /app/node_modules
      - event_lens_dev_logs:/app/packages/event-lens/logs
    command: yarn workspace @gatrix/event-lens dev:worker

  # Chat Server for development (with hot reload)
  chat-server-dev:
    build:
      context: .
      dockerfile: packages/chat-server/Dockerfile.dev
      target: development
    container_name: gatrix-chat-server-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3001
      HOST: 0.0.0.0
      # Database
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: ${CHAT_DB_NAME:-gatrix_chat}
      DB_USER: gatrix_user  # Explicitly set for chat server
      DB_PASSWORD: gatrix_password  # Explicitly set for chat server
      DB_DEBUG: ${DB_DEBUG:-false}
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      REDIS_DB: 1
      # JWT (must match backend)
      JWT_SECRET: ${JWT_SECRET:-dev-jwt-secret}
      JWT_EXPIRES_IN: 24h
      # CORS
      CORS_ORIGIN: "*"
      # Clustering (disabled for dev)
      CLUSTER_ENABLED: false
      CLUSTER_WORKERS: 0
      STICKY_SESSION: false
      # Performance
      BROADCAST_BATCH_SIZE: 1000
      USE_MESSAGE_PACK: false
      BROADCAST_COMPRESSION: false
      WS_MAX_CONNECTIONS: 1000
      # Monitoring
      MONITORING_ENABLED: true
      METRICS_PORT: 9090
      # Gatrix Integration
      GATRIX_API_URL: http://backend-dev:5000
      GATRIX_API_SECRET: ${GATRIX_API_SECRET:-dev-shared-secret}
      # Logging
      LOG_LEVEL: ${CHAT_LOG_LEVEL:-debug}
    ports:
      - "${CHAT_PORT:-3001}:3001"
      - "9090:9090" # Metrics port
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend-dev:
        condition: service_started
    networks:
      - gatrix-dev-network
    volumes:
      - .:/app
      - /app/node_modules
      - chat_server_dev_uploads:/app/packages/chat-server/uploads
      - chat_server_dev_logs:/app/packages/chat-server/logs
    command: yarn workspace @gatrix/chat-server dev

volumes:
  mysql_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  etcd_dev_data:
    driver: local
  backend_dev_logs:
    driver: local
  clickhouse_dev_data:
    driver: local
  event_lens_dev_logs:
    driver: local
  chat_server_dev_uploads:
    driver: local
  chat_server_dev_logs:
    driver: local

networks:
  gatrix-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
