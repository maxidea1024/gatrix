global
    daemon
    maxconn 4096
    log stdout local0
    
    # SSL Configuration
    ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
    mode http
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    option httplog
    option dontlognull
    option redispatch
    retries 3
    
    # Health check
    option httpchk GET /health

# Stats page
stats enable
stats uri /stats
stats refresh 30s
stats admin if TRUE

# Frontend for HTTP traffic
frontend http_frontend
    bind *:80
    
    # Redirect HTTP to HTTPS
    redirect scheme https code 301 if !{ ssl_fc }

# Frontend for HTTPS traffic
frontend https_frontend
    bind *:443 ssl crt /etc/ssl/certs/chat.pem
    
    # WebSocket upgrade handling
    acl is_websocket hdr(Upgrade) -i websocket
    acl is_websocket_path path_beg /socket.io
    
    # Route WebSocket connections with sticky sessions
    use_backend chat_websocket if is_websocket or is_websocket_path
    
    # Route regular HTTP requests
    default_backend chat_http

# Backend for HTTP API requests
backend chat_http
    balance roundrobin
    option httpchk GET /health
    
    # Chat server instances
    server chat1 chat-server:3001 check inter 5s rise 2 fall 3
    server chat2 chat-server:3001 check inter 5s rise 2 fall 3
    server chat3 chat-server:3001 check inter 5s rise 2 fall 3

# Backend for WebSocket connections (sticky sessions)
backend chat_websocket
    balance source
    hash-type consistent
    option httpchk GET /health
    
    # Enable sticky sessions for WebSocket
    stick-table type ip size 100k expire 30m
    stick on src
    
    # Chat server instances
    server chat1 chat-server:3001 check inter 5s rise 2 fall 3
    server chat2 chat-server:3001 check inter 5s rise 2 fall 3
    server chat3 chat-server:3001 check inter 5s rise 2 fall 3

# Backend for metrics (Prometheus)
backend metrics
    balance roundrobin
    option httpchk GET /metrics
    
    server chat1 chat-server:9090 check inter 10s
    server chat2 chat-server:9090 check inter 10s
    server chat3 chat-server:9090 check inter 10s

# Frontend for metrics
frontend metrics_frontend
    bind *:9090
    default_backend metrics
