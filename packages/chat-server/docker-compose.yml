version: '3.8'

services:
  # Chat Server
  chat-server:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
      - "9090:9090" # Metrics port
    environment:
      - NODE_ENV=production
      - PORT=3001
      - HOST=0.0.0.0
      
      # Database
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=gatrix_chat
      - DB_USER=chat_user
      - DB_PASSWORD=chat_password
      
      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis_password
      - REDIS_DB=1
      
      # Clustering
      - CLUSTER_ENABLED=true
      - CLUSTER_WORKERS=0
      - STICKY_SESSION=true
      
      # Performance
      - BROADCAST_BATCH_SIZE=1000
      - USE_MESSAGE_PACK=true
      - BROADCAST_COMPRESSION=true
      - WS_MAX_CONNECTIONS=10000
      
      # Monitoring
      - MONITORING_ENABLED=true
      - METRICS_PORT=9090
      
      # Gatrix Integration
      - GATRIX_API_URL=http://gatrix-main:3000
      - GATRIX_API_SECRET=shared-secret-between-servers
      
    depends_on:
      - mysql
      - redis
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "node", "dist/health-check.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MySQL Database
  mysql:
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=root_password
      - MYSQL_DATABASE=gatrix_chat
      - MYSQL_USER=chat_user
      - MYSQL_PASSWORD=chat_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/conf.d:/etc/mysql/conf.d
    command: >
      --default-authentication-plugin=mysql_native_password
      --innodb-buffer-pool-size=1G
      --innodb-log-file-size=256M
      --max-connections=1000
      --query-cache-type=1
      --query-cache-size=256M
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: >
      redis-server
      --requirepass redis_password
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # Load Balancer (HAProxy)
  load-balancer:
    image: haproxy:2.8-alpine
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # Stats page
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - chat-server
    restart: unless-stopped

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana (Visualization)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  mysql_data:
  redis_data:
  prometheus_data:
  grafana_data:
