services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: gatrix-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${DB_NAME:-gatrix}
      MYSQL_USER: ${DB_USER:-gatrix_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-gatrix_password}
    ports:
      - "${DB_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
      - ./docker/mysql/conf.d:/etc/mysql/conf.d
    networks:
      - gatrix-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD:-rootpassword}"]
      timeout: 20s
      retries: 10
      interval: 30s
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: gatrix-redis
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf --appendonly yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - gatrix-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 10s

  # Backend API
  backend:
    build:
      context: .
      dockerfile: packages/backend/Dockerfile
    container_name: gatrix-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 5000
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: ${DB_NAME:-gatrix}
      DB_USER: ${DB_USER:-gatrix_user}
      DB_PASSWORD: ${DB_PASSWORD:-gatrix_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secret-refresh-key-change-this-in-production}
      SESSION_SECRET: ${SESSION_SECRET:-your-super-secret-session-key-change-this-in-production}
      ADMIN_EMAIL: ${ADMIN_EMAIL:-admin@gatrix.com}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin123}
      ADMIN_NAME: ${ADMIN_NAME:-Administrator}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      DISABLE_X_POWERED_BY: true
      DEFAULT_LANGUAGE: ${DEFAULT_LANGUAGE:-ko}
      # Chat Server Integration
      CHAT_SERVER_URL: http://chat-server:3001
    ports:
      - "${BACKEND_PORT:-5000}:5000"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - gatrix-network
    volumes:
      - backend_logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 30s

  # ClickHouse
  clickhouse:
    image: clickhouse/clickhouse-server:24.12.2.29-alpine
    container_name: gatrix-clickhouse
    restart: unless-stopped
    ports:
      - "${CLICKHOUSE_PORT:-8123}:8123"
      - "9000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    networks:
      - gatrix-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8123/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Event Lens Server
  event-lens:
    build:
      context: .
      dockerfile: packages/event-lens/Dockerfile
    container_name: gatrix-event-lens
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3002
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_DATABASE: event_lens
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_DATABASE: ${DB_NAME:-gatrix}
      MYSQL_USER: ${DB_USER:-gatrix_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-gatrix_password}
      LOG_LEVEL: ${EVENT_LENS_LOG_LEVEL:-info}
    ports:
      - "${EVENT_LENS_PORT:-3002}:3002"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    networks:
      - gatrix-network
    volumes:
      - event_lens_logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3002/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 30s

  # Event Lens Worker
  event-lens-worker:
    build:
      context: .
      dockerfile: packages/event-lens/Dockerfile
    container_name: gatrix-event-lens-worker
    restart: unless-stopped
    command: ["node", "dist/worker.js"]
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_DATABASE: event_lens
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_DATABASE: ${DB_NAME:-gatrix}
      MYSQL_USER: ${DB_USER:-gatrix_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-gatrix_password}
      LOG_LEVEL: ${EVENT_LENS_LOG_LEVEL:-info}
      WORKER_BATCH_SIZE: ${WORKER_BATCH_SIZE:-1000}
      WORKER_BATCH_TIMEOUT: ${WORKER_BATCH_TIMEOUT:-5000}
      WORKER_CONCURRENCY: ${WORKER_CONCURRENCY:-10}
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    networks:
      - gatrix-network
    volumes:
      - event_lens_logs:/app/logs

  # Chat Server
  chat-server:
    build:
      context: .
      dockerfile: packages/chat-server/Dockerfile
    container_name: gatrix-chat-server
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001
      HOST: 0.0.0.0
      # Database
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: ${CHAT_DB_NAME:-gatrix_chat}
      DB_USER: ${DB_USER:-gatrix_user}
      DB_PASSWORD: ${DB_PASSWORD:-gatrix_password}
      DB_DEBUG: false
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      REDIS_DB: 1
      # JWT (must match backend)
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      JWT_EXPIRES_IN: 24h
      # CORS
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      # Clustering
      CLUSTER_ENABLED: ${CHAT_CLUSTER_ENABLED:-true}
      CLUSTER_WORKERS: ${CHAT_CLUSTER_WORKERS:-0}
      STICKY_SESSION: ${CHAT_STICKY_SESSION:-true}
      # Performance
      BROADCAST_BATCH_SIZE: ${CHAT_BROADCAST_BATCH_SIZE:-1000}
      USE_MESSAGE_PACK: ${CHAT_USE_MESSAGE_PACK:-true}
      BROADCAST_COMPRESSION: ${CHAT_BROADCAST_COMPRESSION:-true}
      WS_MAX_CONNECTIONS: ${CHAT_WS_MAX_CONNECTIONS:-10000}
      # Monitoring
      MONITORING_ENABLED: ${CHAT_MONITORING_ENABLED:-true}
      METRICS_PORT: 9090
      # Gatrix Integration
      GATRIX_API_URL: ${GATRIX_API_URL:-http://backend:5000}
      GATRIX_API_SECRET: ${GATRIX_API_SECRET:-shared-secret-between-servers}
      # Logging
      LOG_LEVEL: ${CHAT_LOG_LEVEL:-info}
    ports:
      - "${CHAT_PORT:-3001}:3001"
      - "${CHAT_METRICS_PORT:-9090}:9090"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - gatrix-network
    volumes:
      - chat_server_uploads:/app/uploads
      - chat_server_logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 30s

  # Frontend (Nginx)
  frontend:
    build:
      context: .
      dockerfile: packages/frontend/Dockerfile
    container_name: gatrix-frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:5000/api/v1}
      VITE_APP_NAME: ${VITE_APP_NAME:-Gatrix}
      VITE_DEFAULT_LANGUAGE: ${VITE_DEFAULT_LANGUAGE:-ko}
    ports:
      - "${FRONTEND_PORT:-80}:80"
      - "${FRONTEND_HTTPS_PORT:-443}:443"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - gatrix-network
    volumes:
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 30s

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  clickhouse_data:
    driver: local
  backend_logs:
    driver: local
  event_lens_logs:
    driver: local
  chat_server_uploads:
    driver: local
  chat_server_logs:
    driver: local

networks:
  gatrix-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
